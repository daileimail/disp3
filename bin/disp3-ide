#!/usr/bin/env node
var http = require('http');
var fs = require('fs');
var path = require('path');
var libFile = require("../lib/nodejs/file");
var libReq = require("../lib/nodejs/req");
var libIde = require("../src/ide");
var cp = require("child_process");
var port = 6174;
var idePath = path.resolve(__dirname + "/../ide/");
var dispPath = path.resolve(__dirname + "/../bin/disp2");
var url = require("url");
var global = {};
global.workspace = path.resolve(__dirname + "/../workspace/");
if(!fs.existsSync(global.workspace))
	fs.mkdirSync(global.workspace);

http.createServer(function(req, res) {
	console.log(req.url);


	var filePath;
	if(req.url.match(/^\/read\/(\S+)/)){
		console.log("read");
		filePath = global.workspace + "/" + decodeURIComponent(req.url.match(/^\/read\/(\S+)/)[1]);
		console.log(filePath);
		sendFile(filePath, req, res);
	}else if(req.url.match(/^\/write\/\S+/)){
		console.log("write");
		filePath = global.workspace + "/" + decodeURIComponent(req.url.match(/^\/write\/(\S+)/)[1]);
		console.log(filePath);
		receiveFile(filePath, req, res);
	}else if(req.url.match(/^\/gapi\/[^\/]+$/)){
//global api
		var matches = req.url.match(/^\/gapi\/([^\/]+)/);
		var api = matches[1];
		switch(api){
			case "setenv":
				break;
      case "listproject":
				libIde.listProject(global.workspace, function(err, list){
					res.end(JSON.stringify(list));
				});
				break;
			default:
				res.end("0");
		}
	}else if(req.url.match(/^\/papi\/[^\/]+\/\S+/)){
//project api
		console.log("papi");
		var matches = req.url.match(/^\/papi\/([^\/]+)\/(\S+)/);
		var api = matches[1];
		var proj = matches[2];
		switch(api){
			case "readdir":
			case "updatedir":{
				if(!global.list || api == "updatedir"){
					libFile.readdirParallel(workspace + "/" +proj, function(err, list){
						if(err) res.end(err);
						else {
							global.list = list;
							res.end(JSON.stringify(list));
						}
					});
				}
				break;
			}
			case "readlist":{
				var rp = path.join(global.workspace, proj, ".result.json");
				if(!fs.existsSync(rp)){
					gen(path.join(global.workspace, proj), function(err){
						if(err) {res.end("0"); return;}
						sendFile(rp, req, res);
					});
				}else{
					sendFile(rp, req, res);
				}
				break;
			}
			case "gen":{
				gen(path.join(global.workspace, proj), function(err){
					if(err) res.end("0");
					else res.end("1");
				});
				break;
			}
			default: 
				res.end("0");
		}
		
	}else{
		console.log("static");
		if(req.url == "/") req.url = "/index.html";

		filePath = path.join(idePath, url.parse(req.url).pathname);
		sendFile(filePath, req, res);
	}
}).listen(port, function(err){
	if(err) console.log(err);
	else console.log("listen to port "+port); 
});
function gen(path, fn){
	cp.exec("node " + dispPath, {cwd: path}, function(err, stdout, stderr){
		console.log(stdout);
		console.log(stderr);
		fn(err);
	});
}
function receiveFile(filePath, req, res){
	var tmpFilePath = filePath + ".tmp";
	var stream = fs.createWriteStream(tmpFilePath);
	stream.on('error', function() {
    res.writeHead(404);
    res.end("0");
  });
	stream.on('finish', function() {
		libFile.mvSync(tmpFilePath, filePath);
		res.end("1");
  });
	req.pipe(stream);
}
function setLastModified(res, stat){
	if (!res.getHeader('Date')) res.setHeader('Date', new Date().toUTCString());
  if (!res.getHeader('Cache-Control')) res.setHeader('Cache-Control', 'public, max-age=0');

	if(!res.getHeader("last-modified")){
		var modified = stat.mtime.toUTCString();
		res.setHeader("last-modified", modified);
	}
}
function sendFile(filePath, req, res){
	//rfc2616
	fs.stat(filePath, function onstat(err, stat) {
    if (err && err.code === 'ENOENT'
      && !path.extname(path)
      && path[path.length - 1] !== path.sep) {
      // not found, check extensions
			res.writeHead(404);
			res.end("0");
			return;
    }
    if (err) {
			res.writeHead(404);
			res.end("0");
			return;
		}
    if (stat.isDirectory()) {
			res.writeHead(404);
			res.end("0");
			return;
		}
		setLastModified(res, stat);
		if(libReq.fresh(req.headers, (res._headers || {}))){
			res.writeHead(304);
			res.end();
			return;
		}
		var stream = fs.createReadStream(filePath);
		stream.on('error', function() {
			res.writeHead(404);
			res.end("0");
		});
		stream.pipe(res);
	});
}
